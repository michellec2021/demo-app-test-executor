buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.flywaydb:flyway-gradle-plugin:8.3.0'
        classpath 'org.flywaydb:flyway-mysql:8.3.0'
    }
}

// use gradlew -Penv=${env} to pass
def env = hasProperty('env') ? env : null

apply plugin: org.flywaydb.gradle.FlywayPlugin

tasks.withType(org.flywaydb.gradle.task.AbstractFlywayTask).configureEach {
    doFirst {
        flyway {
            configurations = ['runtimeClasspath'] // use runtimeOnly scope in actual db-migration project
            placeholderReplacement = false
            assert project.file('src/main/resources/db/migration').exists()

            def flywayProperties = env == null ? 'src/main/resources/flyway.properties' : "conf/${env}/resources/flyway.properties"
            assert project.file(flywayProperties).exists()

            def properties = new Properties()
            project.file(flywayProperties).withInputStream {
                properties.load(it)
            }

            url = properties.get('flyway.url')

            def userValue = properties.get('flyway.user')
            if (userValue == 'iam/gcloud') {
                user = iamUser()
                password = iamAccessToken()
            } else {
                user = userValue
                password = properties.get('flyway.password')
            }
        }
    }
}

// refer to core.framework.internal.db.cloud.GCloudAuthProvider
static String iamUser() {
    def email = metadata("email")
    return (email =~ /([^@]*)@[^@]*/)[0][1]
}

static String iamAccessToken() {
    def tokenJSON = metadata("token")
    return (tokenJSON =~ /\{"access_token":"([^"]*)",.*/)[0][1];
}

static String metadata(String attribute) {
    def conn = new URL("http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/${attribute}").openConnection()
    conn.setRequestMethod('GET')
    conn.setRequestProperty('Metadata-Flavor', 'Google')
    conn.connectTimeout = 500
    conn.readTimeout = 1000
    int statusCode = conn.getResponseCode()
    if (statusCode != 200) throw new Error("failed to fetch gcloud iam metadata, status=${statusCode}")
    return conn.getInputStream().getText()
}
